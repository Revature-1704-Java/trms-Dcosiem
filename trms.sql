drop user trms CASCADE;

create USER trms
Identified by p4ssw0rd
Default tablespace users
temporary tablespace temp
QUOTA 10M on users;

Grant connect to trms;
Grant resource to trms;
Grant create session to trms;
Grant create table to trms;
Grant create view to trms;

CONN trms/p4ssw0rd;


CREATE TABLE EMPLOYEE_TYPE
(
    ET_ID NUMBER NOT NULL,
    EMPLOYEE_TYPE VARCHAR2(160),
    CONSTRAINT PK_ET_ID PRIMARY KEY (ET_ID)
);

CREATE TABLE Allotment
(
    A_ID NUMBER NOT NULL,
    Total NUMBER default 1000 NOT NULL,
    Pending NUMBER,
    Awarded Number NOT NULL,
    CONSTRAINT PK_A_ID PRIMARY KEY (A_ID)
);

CREATE TABLE OPT_FILE
(
    File_ID NUMBER NOT NULL,
    REIM_ID NUMBER,
    File_D VARCHAR2(500),
    FileLocation VARCHAR2(240),
    CONSTRAINT PK_FILE_ID PRIMARY KEY (FILE_ID)
);



CREATE TABLE EVENT_TYPE
(
    EVENT_TYPE_ID NUMBER NOT NULL,
    EVENT_TYPE VARCHAR2(100),
    Coverage NUMBER,
    CONSTRAINT PK_EVENT_TYPE_ID PRIMARY KEY (EVENT_TYPE_ID)
);

CREATE TABLE GRADE
(
    Grade_ID NUMBER NOT NULL,
    GradeType VARCHAR2(100),
    LetterGrade VARCHAR2(10),
    GradeCutOff VARCHAR2(20),
    CONSTRAINT PK_GRADE_ID PRIMARY KEY (Grade_ID)
);

CREATE TABLE Employee
(
    E_ID NUMBER NOT NULL,
    Firstname VARCHAR2(160) NOT NULL,
    Lastname VARCHAR2(160) NOT NULL,
    Email VARCHAR2(160) NOT NULL,
    Supervisor_ID NUMBER NOT NULL,
    DeptHead_ID Number NOT NULL,
    ET_ID NUMBER NOT NULL,
    pw VARCHAR2(160) NOT NULL,
    A_ID NUMBER NOT NULL,
    CONSTRAINT PK_EMPLOYEE PRIMARY KEY (E_ID),
    CONSTRAINT FK_ET_ID FOREIGN KEY (ET_ID) REFERENCES EMPLOYEE_TYPE(ET_ID),
    CONSTRAINT FK_A_ID FOREIGN KEY (A_ID) REFERENCES ALLOTMENT(A_ID)
);


CREATE TABLE REIMBURSEMENT
(
    REIM_ID NUMBER,
    E_ID NUMBER,
    EVENT_TYPE_ID NUMBER NOT NULL,
    REIM_DESC VARCHAR2(400),
    REIM_loc VARCHAR2(300),
    JUSTIFICATION VARCHAR2(400),    
    Date_Of_Event DATE,
    GRADE_ID Number NOT NULL,
    REIM_COST NUMBER,
    Time_Submitted TIMESTAMP,
    TIME_MISSED NUMBER,
    Status NUMBER,
    EXCEED_AMOUNT NUMBER,
    EXCEED_REASON VARCHAR2(400),
    DENIED_REASON VARCHAR2(400),    
    CONSTRAINT PK_REIM_ID PRIMARY KEY (REIM_ID),
    CONSTRAINT FK_E_ID FOREIGN KEY (E_ID) REFERENCES EMPLOYEE(E_ID),
    CONSTRAINT FK_EVENT_TYPE_ID FOREIGN KEY (EVENT_TYPE_ID) REFERENCES EVENT_TYPE(EVENT_TYPE_ID),
    CONSTRAINT FK_GRADE_ID FOREIGN KEY (GRADE_ID) REFERENCES GRADE(GRADE_ID)
);



CREATE SEQUENCE SQ_REIM_PK
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_REIM
BEFORE INSERT ON REIMBURSEMENT
FOR EACH ROW
BEGIN
    SELECT SQ_REIM_PK.NEXTVAL
    INTO :NEW.REIM_ID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_EMP_PK
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_EMP
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    SELECT SQ_EMP_PK.NEXTVAL
    INTO :NEW.E_ID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_ET_PK
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_ET
BEFORE INSERT ON EMPLOYEETYPE
FOR EACH ROW
BEGIN
    SELECT SQ_ET_PK.NEXTVAL
    INTO :NEW.ET_ID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_ALLOT_PK
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_ALLOT
BEFORE INSERT ON ALLOTMENT
FOR EACH ROW
BEGIN
    SELECT SQ_ALLOT_PK.NEXTVAL
    INTO :NEW.A_ID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_OPTFILE_PK
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_FILE
BEFORE INSERT ON OPT_FILE
FOR EACH ROW
BEGIN
    SELECT SQ_OPTFILE_PK.NEXTVAL
    INTO :NEW.FILE_ID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_EVENT_PK
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_EVENT
BEFORE INSERT ON EVENT_TYPE
FOR EACH ROW
BEGIN
    SELECT SQ_EVENT_PK.NEXTVAL
    INTO :NEW.EVENT_TYPE_ID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_GRADE_PK
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_GRADE
BEFORE INSERT ON GRADE
FOR EACH ROW
BEGIN
    SELECT SQ_GRADE_PK.NEXTVAL
    INTO :NEW.GRADE_ID FROM DUAL;
END;
/

--insert into EMPLOYEE values (1, 'Jon', 'Snow', 'winterfell', 'King in the North');
--insert into REIMBURSEMENT values (1,'12-DEC-17', CURRENT_TIMESTAMP, 'Winterfell', 500, 'Regular', 'A', 'University Course', 'PENDING', CURRENT_DATE, 1);  
--
--select * from Employee;
--select * from reimbursement;
--
--insert into GRADE VALUES (1, 'pass/fail', 'C-', null);
--insert into EVENT_TYPE VALUES (1, 'course', 80);
--insert into ALLOTMENT VALUES (1, 1000, 0, 0);
--insert into EMPLOYEE VALUES (1, 'jon', 'snow', 'jsnow@gmail.com', 50, 60, 1,    'winterfell', 1);
--insert into EMPLOYEE_TYPE VALUES (1, 'Supervisor');
--insert into REIMBURSEMENT values (1, 1, 1,'DUMMY', 'somewhere', 'because i wanted to', '12-DEC-17', 1, 300, CURRENT_TIMESTAMP, 2, 0, null, null, null);
--insert into REIMBURSEMENT values (0, 1, 1,'DUMMY', 'somewhere', 'because i wanted to', '12-DEC-17', 1, 300, CURRENT_TIMESTAMP, 2, 0, null, null, null);
--insert into REIMBURSEMENT values (null, 1, 1,'DUMMY', 'somewhere', 'because i wanted to', '12-DEC-17', 1, 300, CURRENT_TIMESTAMP, 2, 0, null, null, null);
--insert into REIMBURSEMENT (REIM_ID, E_ID, EVENT_TYPE_ID, REIM_DESC, REIM_LOC, 
--JUSTIFICATION, DATE_OF_EVENT, GRADE_ID, REIM_COST, TIME_SUBMITTED,
--TIME_MISSED, STATUS, EXCEED_AMOUNT, EXCEED_REASON, DENIED_REASON) VALUES
--(2, 1, 1,'DUMMY', 'somewhere', 'because i wanted to', '12-DEC-17', 1, 300,
--CURRENT_TIMESTAMP, 2, 0, null, null, null);

--delete from reimbursement where E_ID = 1;
--select * from reimbursement;

--insert into REIMBURSEMENT values (1, 1, 1,'DUMMY', 'somewhere', 'because i wanted to', '12-DEC-17', 1, 300, CURRENT_TIMESTAMP, 2, 0, null, null, null);
--insert into REIMBURSEMENT values (null, 1, 1,'DUMMY', 'somewhere', 'because i wanted to', '12-DEC-17', 1, 300, CURRENT_TIMESTAMP, 2, 0, null, null, null);

CREATE OR REPLACE PROCEDURE 
SP_SUBMIT_REIM(E_ID IN NUMBER, EVENT_TYPE_ID IN NUMBER, event_desc in varchar2, LOCATION_IN IN VARCHAR2, justification in varchar2, DATE_OF_EVENT IN DATE, GRADE_ID IN NUMBER, reim_cost in number, TIME_MISSED IN NUMBER) AS
BEGIN
IF TRUE THEN
    DBMS_OUTPUT.PUT_LINE('VALID PARAM');
ELSE
    DBMS_OUTPUT.PUT_LINE('INVALID PARAM');
END IF;
    INSERT INTO REIMBURSEMENT VALUES (null, E_ID, EVENT_TYPE_ID, EVENT_DESC, LOCATION_IN, JUSTIFICATION, DATE_OF_EVENT, GRADE_ID, REIM_COST, CURRENT_TIMESTAMP, TIME_MISSED, 0, null, null, null);
    DBMS_OUTPUT.PUT_LINE('Submitted Form!');
    COMMIT;
        EXCEPTION
        WHEN OTHERS
        THEN DBMS_OUTPUT.PUT_LINE('FAILED TO SUBMTI FORM');
        ROLLBACK;
END;
/

select * from employee;

BEGIN:
    sp_submit_reim();
--    SP_SUBMIT_REIM(1, 1,'DUMMY', 'somewhere', 'because i wanted to', '12-DEC-17', 1, 300, 2);
END;
/
